
Here is a Test Cases Document for the Wisecow application that includes functional, integration, deployment, and TLS validation tests. Since the app is a Bash-based HTTP service, we'll use tools like `curl`, shell commands, and Kubernetes access tools (`kubectl`) for testing.


 Wisecow Application - Test Cases Document

Project: Wisecow (Bash-based Web App)
Version: 1.0
Author: Vinay


---

## ‚úÖ 1. Functional Test Cases

| TC ID | Test Description                  | Steps                                | Expected Result                         | Status |
| ----- | --------------------------------- | ------------------------------------ | --------------------------------------- | ------ |
| TC1   | Server starts successfully        | Run `./wisecow.sh`                   | "Wisdom served on port=4499..." message | Pass   |
| TC2   | API returns HTTP response         | Run: `curl -i http://localhost:4499` | HTTP 200 OK with cowsay fortune text    | Pass   |
| TC3   | Response includes `cowsay` output | Run: `curl http://localhost:4499`    | Output includes ASCII cow and a fortune | Pass   |
| TC4   | Invalid port is not open          | Run: `curl http://localhost:9999`    | Connection refused                      | Pass   |

---

## üê≥ 2. Docker-Based Test Cases

| TC ID | Test Description                        | Steps                                  | Expected Result                        | Status |
| ----- | --------------------------------------- | -------------------------------------- | -------------------------------------- | ------ |
| TC5   | Docker image builds successfully        | Run: `docker build -t wisecow .`       | Image builds without errors            | Pass   |
| TC6   | Container runs and exposes correct port | Run: `docker run -p 4499:4499 wisecow` | Access via `curl localhost:4499` works | Pass   |

---

## ‚ò∏Ô∏è 3. Kubernetes Deployment Test Cases

| TC ID | Test Description                | Steps                                                                         | Expected Result             | Status |
| ----- | ------------------------------- | ----------------------------------------------------------------------------- | --------------------------- | ------ |
| TC7   | Deployment is created           | `kubectl apply -f k8s/deployment.yaml`                                        | Pod is created and running  | Pass   |
| TC8   | Service is reachable in cluster | `kubectl port-forward svc/wisecow-service 8080:80` <br> `curl localhost:8080` | Returns cowsay output       | Pass   |
| TC9   | Ingress responds with 200 OK    | Access `https://wisecow.example.com` in browser or `curl -k`                  | Valid TLS + cowsay response | Pass   |

---



---

4. Edge & Negative Test Cases

| TC ID | Test Description                    | Steps                                   | Expected Result                            | Status |
| ----- | ----------------------------------- | --------------------------------------- | ------------------------------------------ | ------ |
| TC15  | Missing cowsay/fortune throws error | Remove packages and run `./wisecow.sh`  | Script exits with "Install prerequisites." | Pass   |
| TC16  | Invalid image fails in Kubernetes   | Use fake image tag in `deployment.yaml` | Pod in CrashLoopBackOff state              | Pass   |

---

 üìã Summary

| Category      | Total | Passed | Failed |
| ------------- | ----- | ------ | ------ |
| Functional    | 4     | ‚úÖ 4    | ‚ùå 0    |
| Docker        | 2     | ‚úÖ 2    | ‚ùå 0    |
| Kubernetes    | 3     | ‚úÖ 3    | ‚ùå 0    |
| Edge/Negative | 2     | ‚úÖ 2    | ‚ùå 0    |

















Problem 2:


Here's a Test Case Document for the System Health Monitoring Script**. It defines how to verify that the script functions correctly by simulating different system conditions.

---

## ‚úÖ Test Case Document

Document Title:** Test Cases for Linux System Health Monitoring Script
Author:Vinay
Script File: `system_health_monitor.sh`

---

### üìå Overview

The purpose of these test cases is to validate the behavior of the script under different system load conditions. The script checks:

* CPU usage
* Memory usage
* Disk usage
* Number of running processes

Alerts should trigger only when a threshold is exceeded.

---

 üîç Test Cases

| TC ID | Test Case Description                          | Input/Setup                                                  | Expected Output                                     | Pass Criteria                           |
| ----- | ---------------------------------------------- | ------------------------------------------------------------ | --------------------------------------------------- | --------------------------------------- |
| TC01  | Normal usage ‚Äì all metrics below threshold     | System in idle state                                         | No alert messages; just timestamp and divider       | Script runs without printing any alerts |
| TC02  | High CPU usage                                 | Simulate with `stress` or `yes > /dev/null`                  | `ALERT: CPU usage is above 80%`                     | CPU alert is printed                    |
| TC03  | High memory usage                              | Run a memory-heavy app or use `stress --vm 1 --vm-bytes 90%` | `ALERT: Memory usage is above 80%`                  | Memory alert is printed                 |
| TC04  | High disk usage                                | Fill `/` partition above 80%                                 | `ALERT: Disk usage is above 80%`                    | Disk alert is printed                   |
| TC05  | High process count                             | Run `for i in {1..200}; do sleep 60 & done`                  | `ALERT: Number of running processes is above 100`   | Process count alert is printed          |
| TC06  | Multiple alerts                                | Trigger CPU + memory + disk high at once                     | Multiple alert messages                             | All appropriate alerts are printed      |
| TC07  | Incorrect threshold values (e.g., non-numeric) | Modify script: `CPU_THRESHOLD=abc`                           | Script error or fails gracefully                    | Script exits or prints an error         |
| TC08  | Check timestamp and formatting                 | Run script normally                                          | Shows `System health check at <date>` and separator | Timestamp and separator line appear     |
| TC09  | Logging to file (optional enhancement)         | Redirect output to a log file                                | Output is stored in file                            | Log file contains expected messages     |
| TC10  | Run from `cron` (optional)                     | Schedule via `crontab`                                       | Output appears in cron log or configured location   | Script executes as scheduled            |

---

 üß™ Test Environment

OS:Linux (Ubuntu, CentOS, etc.)
Shell: Bash
Permissions: Script should be executable (`chmod +x system_health_monitor.sh`)
Dependencies:`awk`, `top`, `df`, `ps`, `free`, `grep`, `sed`



Test cases for the `log_analyzer.sh` script:

Understood! Here's a more concise version of the final 2 test cases without too much detail:

| **Test Case ID** | **Test Case Description**                              | Test Steps                                                                                         | Expected Output                                 | Status |
| ---------------- | ------------------------------------------------------ | ------------------------------------------------------------------------------------------------------- | --------------------------------------------------- | ---------- |
| TC01       | Valid log file with multiple `404` errors              | 1. Use a log file with multiple `404` errors.<br>2. Run the script: `./log_analyzer.sh error_log.log`   | Script counts the number of `404` errors correctly. | Pass  |
| TC02         | Log file with mixed status codes (`200`, `404`, `500`) | 1. Use a log file with various status codes.<br>2. Run the script: `./log_analyzer.sh status_codes.log` | Script counts only `404` errors.                    | Pass  |









